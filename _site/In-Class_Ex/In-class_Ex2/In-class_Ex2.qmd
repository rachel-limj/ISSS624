---
title: "In-Class Exercise 2: Geospatial Analytics for Social Good"
editor: visual
---

## Overview

Apply appropriate global and local measures of spatial Association techniques to reveals the spatial patterns of Not Functional water points in Nigeria.

## Getting Started

In this hands-on exercise, the key R package used are:

-   **sf**

-   **tmap**

-   **tidyverse**

-   **spdep**

-   **funModeling**

```{r}
pacman::p_load(sf,tidyverse,tmap,spdep,funModeling)
```

## Importing Geospatial Data

**Geo_Export** - Water point data in [WPdx+ data set](https://data.waterpointdata.org/dataset/Water-Point-Data-Exchange-Plus-WPdx-/eqje-vguj/data) downloaded from WPdx Global Data Repositories

**NGA-ADM2** - Nigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data downloaded from [geoBoundaries](https://www.geoboundaries.org/index.html#getdata)

### Importing water point geospatial data

First, we are going to import the water point geospatial data (i.e. geo_export) by using the code chunk below.

```{r}
#| eval: false

wp <- st_read(dsn = "data/geospatial",
              layer = "geo_export",
              crs = 4326) %>%
  filter(clean_coun == "Nigeria")
```

Next, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in data sub-folder.

```{r}
#| eval: false
write_rds(wp, "data/rds/wp_nga.rds")
```

### Importing Nigeria LGA boundary data

Now, we are going to import the LGA boundary data into R environment by using the code chunk below.

```{r}
#| eval: false
nga <- st_read(dsn = "data/geospatial",
               layer = "nga_admbnda_adm2_osgof_20190417",
           crs = 4326)
```

st_read() of sf package is used to import NGA-ADM2 shapefile into R environment and save the imported geospatial data into simple feature data table.

## Data Wrangling

### Recoding NA values into string

In the code chunk below, `replace_na()` is used to recode all the *NA* values in *status_cle* field into *Unknown*.

```{r}
#| eval: false
wp_nga <- read_rds("data/rds/wp_nga.rds") %>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

```{r}
#| eval: false
freq(data=wp_nga, 
     input = 'status_cle')
```

## Extracting Water Point Data

In this section, we will extract the water point records by using classes in *status_cle* field.

### Extracting funtional water point

In the code chunk below, filter() of dplyr is used to select functional water points.

```{r}
#| eval: false
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
#| eval: false
freq(data=wpt_functional, 
     input = 'status_cle')
```

### Extracting non-functional water point

In the code chunk below, filter() of dplyr is used to select non-functional water points.

```{r}
#| eval: false
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

```{r}
#| eval: false
freq(data=wpt_nonfunctional, 
     input = 'status_cle')
```

### Extracting water point with Unknown class

```{r}
#| eval: false
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Performing Point-in-Polygon Count

```{r}
#| eval: false
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

## Saving the Analytical Data Table

```{r}
#| eval: false
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)
```

Things to learn from the code chunk above:

-   mutate() of dplyr package is used to derive two fields namely pct_functional and pct_non-functional.

-   to keep the file size small, select() of dplyr is used to retain only field 3,4,9,10, 18,19,20,21,22,and 23.

Now, you have the tidy sf data table subsequent analysis. We will save the sf data table into rds format.

```{r}
#| eval: false
write_rds(nga_wp, "data/rds/nga_wp.rds")
```

Before you end this section, please remember to delete away all the raw data. Notice that the only data file left is *nga_wp.rds* and it's file size is aroung 2.1MB.

## Visualising the spatial distribution of water points

```{r}
nga_wp <- read_rds("data/rds/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```
